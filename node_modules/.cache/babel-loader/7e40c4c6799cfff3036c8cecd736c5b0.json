{"ast":null,"code":"var _jsxFileName = \"/Users/artemparhomenko/my-app/src/components/Login/Login.jsx\";\nimport { connect } from 'react-redux';\nimport { login, getCaptcha } from \"../../redux/auth-reducer\";\nimport { Navigate } from \"react-router-dom\";\nimport CustomInput from \"../common/FormsControl/CustomInput\";\nimport CustomCheckbox from \"../common/FormsControl/CustomInput\";\nimport { loginValidation } from '../../utilits/validators';\nimport { Form, Formik } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = props => {\n  if (props.isAuth) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/profile/${props.userId}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  } else {\n    getCaptcha();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: '',\n          password: '',\n          rememberMe: false,\n          captcha: ''\n        },\n        onSubmit: values => {\n          props.login(values.email, values.password, values.rememberMe);\n        },\n        validationSchema: loginValidation,\n        children: _ref => {\n          let {\n            isValid,\n            dirty\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(CustomInput, {\n              label: \"Email: \",\n              name: \"email\",\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(CustomInput, {\n              label: \"Password: \",\n              name: \"password\",\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(CustomCheckbox, {\n              label: \"rememberMe \",\n              name: \"rememberMe\",\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 25\n            }, this), console.log(isValid), props.captcha && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: props.captcha\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 43\n            }, this) && /*#__PURE__*/_jsxDEV(CustomInput, {\n              label: \"Captcha:\",\n              name: \"captcha\",\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 74\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: !isValid || !dirty,\n              type: 'submit',\n              children: \"Save changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_c = LoginForm;\n\nlet mapStateToProps = state => {\n  return {\n    userId: state.auth.id,\n    isAuth: state.auth.isAuth,\n    captcha: state.auth.captcha\n  };\n};\n\nexport default connect(mapStateToProps, {\n  login,\n  getCaptcha\n})(LoginForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["connect","login","getCaptcha","Navigate","CustomInput","CustomCheckbox","loginValidation","Form","Formik","LoginForm","props","isAuth","userId","email","password","rememberMe","captcha","values","isValid","dirty","console","log","mapStateToProps","state","auth","id"],"sources":["/Users/artemparhomenko/my-app/src/components/Login/Login.jsx"],"sourcesContent":["import { connect } from 'react-redux'\nimport { login, getCaptcha } from \"../../redux/auth-reducer\"\nimport { Navigate } from \"react-router-dom\"\nimport CustomInput from \"../common/FormsControl/CustomInput\"\nimport CustomCheckbox from \"../common/FormsControl/CustomInput\"\nimport { loginValidation } from '../../utilits/validators'\nimport { Form, Formik } from 'formik'\n\n\nconst LoginForm = (props) => {\n    if (props.isAuth) {\n        return <Navigate to={`/profile/${props.userId}`} />\n    } else {\n        getCaptcha()\n        return <div>\n            <h1>Login</h1>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                    rememberMe: false,\n                    captcha: ''\n                }}\n                onSubmit={(values) => { props.login(values.email, values.password, values.rememberMe) }}\n                validationSchema={loginValidation}\n            >\n                {({ isValid, dirty }) => (\n                    <Form>\n                        <CustomInput label='Email: ' name='email' type='text' />\n                        <CustomInput label='Password: ' name='password' type='text' />\n                        <CustomCheckbox label='rememberMe ' name='rememberMe' type='checkbox' />\n                        {console.log(isValid)}\n                        {props.captcha && <img src={props.captcha} /> && <CustomInput label='Captcha:' name='captcha' type='text' />}\n                        <button disabled={!isValid || !dirty} type={'submit'}>Save changes</button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        userId: state.auth.id,\n        isAuth: state.auth.isAuth,\n        captcha: state.auth.captcha\n    }\n}\nexport default connect(mapStateToProps, { login, getCaptcha })(LoginForm)"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,0BAAlC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,QAA7B;;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EACzB,IAAIA,KAAK,CAACC,MAAV,EAAkB;IACd,oBAAO,QAAC,QAAD;MAAU,EAAE,EAAG,YAAWD,KAAK,CAACE,MAAO;IAAvC;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAFD,MAEO;IACHV,UAAU;IACV,oBAAO;MAAA,wBACH;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADG,eAEH,QAAC,MAAD;QACI,aAAa,EAAE;UACXW,KAAK,EAAE,EADI;UAEXC,QAAQ,EAAE,EAFC;UAGXC,UAAU,EAAE,KAHD;UAIXC,OAAO,EAAE;QAJE,CADnB;QAOI,QAAQ,EAAGC,MAAD,IAAY;UAAEP,KAAK,CAACT,KAAN,CAAYgB,MAAM,CAACJ,KAAnB,EAA0BI,MAAM,CAACH,QAAjC,EAA2CG,MAAM,CAACF,UAAlD;QAA+D,CAP3F;QAQI,gBAAgB,EAAET,eARtB;QAAA,UAUK;UAAA,IAAC;YAAEY,OAAF;YAAWC;UAAX,CAAD;UAAA,oBACG,QAAC,IAAD;YAAA,wBACI,QAAC,WAAD;cAAa,KAAK,EAAC,SAAnB;cAA6B,IAAI,EAAC,OAAlC;cAA0C,IAAI,EAAC;YAA/C;cAAA;cAAA;cAAA;YAAA,QADJ,eAEI,QAAC,WAAD;cAAa,KAAK,EAAC,YAAnB;cAAgC,IAAI,EAAC,UAArC;cAAgD,IAAI,EAAC;YAArD;cAAA;cAAA;cAAA;YAAA,QAFJ,eAGI,QAAC,cAAD;cAAgB,KAAK,EAAC,aAAtB;cAAoC,IAAI,EAAC,YAAzC;cAAsD,IAAI,EAAC;YAA3D;cAAA;cAAA;cAAA;YAAA,QAHJ,EAIKC,OAAO,CAACC,GAAR,CAAYH,OAAZ,CAJL,EAKKR,KAAK,CAACM,OAAN,iBAAiB;cAAK,GAAG,EAAEN,KAAK,CAACM;YAAhB;cAAA;cAAA;cAAA;YAAA,QAAjB,iBAAgD,QAAC,WAAD;cAAa,KAAK,EAAC,UAAnB;cAA8B,IAAI,EAAC,SAAnC;cAA6C,IAAI,EAAC;YAAlD;cAAA;cAAA;cAAA;YAAA,QALrD,eAMI;cAAQ,QAAQ,EAAE,CAACE,OAAD,IAAY,CAACC,KAA/B;cAAsC,IAAI,EAAE,QAA5C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QANJ;UAAA;YAAA;YAAA;YAAA;UAAA,QADH;QAAA;MAVL;QAAA;QAAA;QAAA;MAAA,QAFG;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EAwBH;AACJ,CA9BD;;KAAMV,S;;AAgCN,IAAIa,eAAe,GAAIC,KAAD,IAAW;EAC7B,OAAO;IACHX,MAAM,EAAEW,KAAK,CAACC,IAAN,CAAWC,EADhB;IAEHd,MAAM,EAAEY,KAAK,CAACC,IAAN,CAAWb,MAFhB;IAGHK,OAAO,EAAEO,KAAK,CAACC,IAAN,CAAWR;EAHjB,CAAP;AAKH,CAND;;AAOA,eAAehB,OAAO,CAACsB,eAAD,EAAkB;EAAErB,KAAF;EAASC;AAAT,CAAlB,CAAP,CAAgDO,SAAhD,CAAf"},"metadata":{},"sourceType":"module"}